[metadata]
name = tacker
version = 2014.2
summary = OpenStack servicevm/device manager
description-file =
    README.rst
author = OpenStack
author-email = openstack-dev@lists.openstack.org
home-page = http://www.openstack.org/
classifier =
    Environment :: OpenStack
    Intended Audience :: Information Technology
    Intended Audience :: System Administrators
    License :: OSI Approved :: Apache Software License
    Operating System :: POSIX :: Linux
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7
    Programming Language :: Python :: 2.6

[files]
packages =
    tacker
data_files =
    etc/tacker =
        etc/tacker/api-paste.ini
        etc/tacker/policy.json
        etc/tacker/tacker.conf
        etc/tacker/rootwrap.conf
    etc/rootwrap.d =
        etc/tacker/rootwrap.d/servicevm.filters
    etc/init.d = etc/init.d/tacker-server

[global]
setup-hooks =
    pbr.hooks.setup_hook
    tacker.hooks.setup_hook

[entry_points]
console_scripts =
    tacker-db-manage = tacker.db.migration.cli:main
    tacker-server = tacker.cmd.server:main
    tacker-rootwrap = oslo.rootwrap.cmd:main
tacker.service_plugins =
    dummy = tacker.tests.unit.dummy_plugin:DummyServicePlugin
    vnfm = tacker.vm.plugin:VNFMPlugin
    sfc = tacker.sfc.plugin:SFCPlugin
    sfc_classifier = tacker.sfc_classifier.plugin:SFCCPlugin
tacker.openstack.common.cache.backends =
    memory = tacker.openstack.common.cache._backends.memory:MemoryBackend
tacker.servicevm.device.drivers =
    noop = tacker.vm.drivers.noop:DeviceNoop
    nova = tacker.vm.drivers.nova.nova:DeviceNova
    heat = tacker.vm.drivers.heat.heat:DeviceHeat
tacker.servicevm.mgmt.drivers =
    noop = tacker.vm.mgmt_drivers.noop:DeviceMgmtNoop
    openwrt = tacker.vm.mgmt_drivers.openwrt.openwrt:DeviceMgmtOpenWRT
tacker.sfc.drivers =
    opendaylight = tacker.sfc.drivers.opendaylight:DeviceOpenDaylight
tacker.sfc_classifier.drivers =
    netvirtsfc = tacker.sfc_classifier.drivers.netvirtsfc:NetVirtSFC

[build_sphinx]
all_files = 1
build-dir = doc/build
source-dir = doc/source

[extract_messages]
keywords = _ gettext ngettext l_ lazy_gettext
mapping_file = babel.cfg
output_file = tacker/locale/tacker.pot

[compile_catalog]
directory = tacker/locale
domain = tacker

[update_catalog]
domain = tacker
output_dir = tacker/locale
input_file = tacker/locale/tacker.pot

[wheel]
universal = 1
